// –°–æ–∑–¥–∞—ë–º Web Worker —Å –¥–≤–∏–∂–∫–æ–º
const stockfish = new Worker("engine/stockfish-17-single.js");

let isReady = false;
let isInitialized = false;
let pendingCommands = [];

let bestMoveCallback = null;
let evalTimeout = null;
let isEvaluating = false; // üõ° –∑–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏

// –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –≤ –¥–≤–∏–∂–æ–∫
function sendToEngine(command) {
    if (isReady) {
        stockfish.postMessage(command);
    } else {
        pendingCommands.push(command);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –¥–≤–∏–∂–∫–∞
stockfish.onmessage = function (event) {
    const line = event.data;
    console.log("SF:", line);

    if (line === "uciok") {
        isInitialized = true;
        stockfish.postMessage("isready");
    }

    if (line === "readyok") {
        isReady = true;
        // –í—ã–ø–æ–ª–Ω–∏—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        pendingCommands.forEach(cmd => stockfish.postMessage(cmd));
        pendingCommands = [];
    }

    // –ï—Å–ª–∏ –¥–≤–∏–∂–æ–∫ –≤—ã–¥–∞–ª –ª—É—á—à–∏–π —Ö–æ–¥
    if (line.startsWith("bestmove") && bestMoveCallback) {
        const parts = line.split(" ");
        if (parts.length >= 2) {
            const bestMove = parts[1];
            bestMoveCallback(bestMove);
        }
        bestMoveCallback = null;
    }

    // –ï—Å–ª–∏ –ø—Ä–∏—à–ª–∞ –æ—Ü–µ–Ω–∫–∞ –ø–æ–∑–∏—Ü–∏–∏
    if (line.startsWith("info depth")) {
        const depthMatch = line.match(/depth (\d+)/);
        const scoreMatch = line.match(/score (cp|mate) (-?\d+)/);

        if (depthMatch && scoreMatch) {
            const depth = parseInt(depthMatch[1]);
            const type = scoreMatch[1];
            const value = parseInt(scoreMatch[2]);
            const score = type === "mate" ? (value > 0 ? 1000 : -1000) : value;

            if (depth >= 10) {
                clearTimeout(evalTimeout);
                evalTimeout = setTimeout(() => {
                    updateEvalBar(score);
                    isEvaluating = false; // –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω
                }, 400);
            }
        }
    }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–∫–∞
stockfish.postMessage("uci");

// –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ –∏ –∑–∞–ø—Ä–æ—Å –æ—Ü–µ–Ω–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è —à–∫–∞–ª—ã)
export function evaluatePosition(fen) {
    if (isEvaluating) return;
    isEvaluating = true;

    sendToEngine("stop");
    sendToEngine("ucinewgame");
    sendToEngine("position fen " + fen);
    sendToEngine("go depth 12");

    // —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞: —Å–±—Ä–æ—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, –µ—Å–ª–∏ –¥–≤–∏–∂–æ–∫ –∑–∞–≤–∏—Å–Ω–µ—Ç
    setTimeout(() => {
        isEvaluating = false;
    }, 3000);
}

// –ü–æ–ª—É—á–∏—Ç—å –ª—É—á—à–∏–π —Ö–æ–¥ –æ—Ç –¥–≤–∏–∂–∫–∞ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
export function getBestMoveFromEngine(fen, callback) {
    bestMoveCallback = callback;

    sendToEngine("stop");
    sendToEngine("ucinewgame");
    sendToEngine("position fen " + fen);
    sendToEngine("go depth 12");
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π —à–∫–∞–ª—ã –æ—Ü–µ–Ω–∫–∏ –ø–æ–∑–∏—Ü–∏–∏
function updateEvalBar(score) {
    const capped = Math.max(Math.min(score, 1000), -1000);

    // –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º: –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ ‚Äî –ø–µ—Ä–µ–≤–µ—Å –±–µ–ª—ã—Ö => –±–µ–ª–∞—è —à–∫–∞–ª–∞ —Å–Ω–∏–∑—É
    const percent = 50 - (capped / 20);
    const whiteHeight = Math.min(Math.max(percent, 0), 100);
    const blackHeight = 100 - whiteHeight;

    document.getElementById('evalWhite').style.height = `${whiteHeight}%`;
    document.getElementById('evalBlack').style.height = `${blackHeight}%`;
}


